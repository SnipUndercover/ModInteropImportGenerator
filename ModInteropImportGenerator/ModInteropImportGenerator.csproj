<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <Nullable>enable</Nullable>
        <IsPackable>true</IsPackable>
        <LangVersion>latest</LangVersion>

        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <IsRoslynComponent>true</IsRoslynComponent>

        <RootNamespace>ModInteropImportGenerator</RootNamespace>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="JetBrains.Annotations" Version="2024.3.0" />
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="4.14.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.12.0" />
    </ItemGroup>

    <!-- NuGet package stuff -->
    <PropertyGroup>
        <PackageId>ModInteropImportGenerator</PackageId>
        <Authors>SnipUndercover</Authors>
        <Product>ModInteropImportGenerator</Product>
        <Title>ModInterop Import Generator</Title>
        <PackageDescription>Source generator for MonoMod.ModInterop imports.</PackageDescription>
        <RepositoryUrl>https://github.com/SnipUndercover/ModInteropImportGenerator/</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageTags>MonoMod.ModInterop,ModInterop,source generator,sourcegen,roslyn,import,export,mod,modding</PackageTags>

        <Version>1.1.0</Version>
        <PackageReleaseNotes>
            - Deprecated DependencyNotPresent in favor of the new ImportFailed ImportState enum
            - Replaced the UnreachableException with InvalidOperationException if the import state is invalid
            - Adjusted exception messages
        </PackageReleaseNotes>

        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
        <!-- Build a NuGet package on a Release build -->
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <!-- Don't include build output, as we're not a library -->
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <!-- We don't include dependencies, so suppress the warning -->
        <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
        <!-- We're a development-time dependency only, don't make ourselves a transitive dependency -->
        <DevelopmentDependency>true</DevelopmentDependency>
    </PropertyGroup>

    <ItemGroup Condition="'$(Configuration)' == 'Release'">
        <!-- Package the generator in the analyzer directory of the nuget package if building in Release -->
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
        <!-- Add a README and license -->
        <None Include="../README.md" Pack="true" PackagePath="\"/>
        <None Include="../LICENSE.txt" Pack="true" PackagePath="\"/>
    </ItemGroup>
</Project>
